// -*- c -*-

// This is a line comment.

/*
 * This is a block comment.
 */

int assert(int expected, int actual, char *code)
{
  if (expected == actual)
  {
    printf("%s => %d\n", code, actual);
  }
  else
  {
    printf("%s => %d expected, but got %d\n", code, expected, actual);
    exit(1);
  }
}

int add2(int x, int y)
{
  return x + y;
}

int sub2(int x, int y)
{
  return x - y;
}

int add6(int a, int b, int c, int d, int e, int f)
{
  return a + b + c + d + e + f;
}

int fib(int x)
{
  if (x <= 1)
  {
    return 1;
  }
  return fib(x - 1) + fib(x - 2);
}

int sub_char(char a, char b, char c)
{
  return a - b - c;
}

int g1;
int g2[4];

int main()
{
  assert(0, 0, "0");
  assert(42, 42, "42");
  assert(2, 1 + 1, "1 + 1");
  assert(51, 5 - 21 + 67, "5 - 21 + 67");
  assert(-23, 10 - 34 + 1, "10 - 34 + 1");
  assert(7, 1 + 1 * (3 + 3), "1 + 1 * (3 + 3)");
  assert(3, (3 + 4) / 2, "(3 + 4) / 2");
  assert(-3, -3, "-3");
  assert(7, +7, "+7");
  assert(200, -10 * (-20), "-10 * (-20)");

  assert(0, 0 == 1, "0 == 1");
  assert(1, 1 == 1, "1 == 1");
  assert(0, 5 != 5, "5 != 5");
  assert(1, 5 != 4, "5 != 4");
  assert(0, 40 < 1, "40 < 1");
  assert(1, 3 < 10, "3 < 10");
  assert(0, 5 > 53, "5 > 53");
  assert(1, 7 > 3, "7 > 3");
  assert(0, 7 <= 3, "7 <= 3");
  assert(1, 3 <= 3, "3 <= 3");
  assert(1, 3 <= 7, "3 <= 7");
  assert(0, 3 >= 5, "3 >= 5");
  assert(1, 3 >= 3, "3 >= 3");
  assert(1, 5 >= 3, "5 >= 3");

  assert(5, ({ int x = 3; int y = 2; x + y; }), "int x = 3; int y = 2; x + y;");

  assert(29, ({ int a = 3 + 4; int b = 5 * 6 - 8; a + b; }), "int a = 3 + 4; int b = 5 * 6 - 8; return a + b;");
  assert(8, ({ int foo = 3; int bar = 5; foo + bar; }), "int foo = 3; int bar = 5; foo + bar;");
  assert(58, ({ int foo = 3 * 20 - (6 / 2); int bar = 45 >= 10; foo + bar; }), "int foo = 3 * 20 - (6 / 2); int bar = 45 >= 10; foo + bar;");
  assert(5, ({ int foo = 5; foo; }), "int foo = 5; return foo;");

  assert(2, ({ int foo = 10; int bar; if (foo < 5) { bar = 1; } else { bar = 2; } bar; }), "int foo = 10; int bar; if (foo < 5) { bar = 1; } else { bar = 2; } bar;");

  assert(10, ({ int count = 0; while (count < 10) { count = count + 1; } count; }), "int count = 0; while (count < 10) { count = count + 1; } count;");
  assert(43, ({ int count = 0; int i = 0; for (i = 0; i < 43; i = i + 1) { count = count + 1; } count; }), "{ int count = 0; int i = 0; for (i = 0; i < 43; i = i + 1) { count = count + 1; } count;");
  assert(6, ({ 1 + 5; }), "{ 1 + 5; }");
  assert(20, ({ 1 + 5; 4 * 5; }), "{ 1 + 5; 4 * 5; }");

  assert(3, ({ int x = 3; *&x; }), "{ int x = 3; *&x; }");
  assert(5, ({ int x = 5; int y = &x; int **z = &y; **z; }), "{ int x = 5; int y = &x; int **z = &y; **z; }");
  assert(7, ({ int x = 4; int y = 7; *(&x + 1); }), "{ int x = 4; int y = 7; *(&x + 1); }");
  assert(3, ({ int x = 3; int y = 5; *(&y - 1); }), "{ int x = 3; int y = 5; *(&y - 1); }");
  assert(5, ({ int x = 3; int *y = &x; *y = 5; x; }), "{ int x = 3; int *y = &x; *y = 5; x; }");
  assert(7, ({ int x = 3; int y = 5; *(&x + 1) = 7; y; }), "{ int x = 3; int y = 5; *(&x + 1) = 7; y; }");
  assert(7, ({ int x = 3; int y = 5; *(&y - 1) = 7; x; }), "{ int x = 3; int y = 5; *(&y - 1) = 7; x; }");
  assert(2, ({ int x = 3; (&x + 2) - &x; }), "{ int x = 3; (&x + 2) - &x; }");

  assert(7, ({ add2(3, 4); }), "add2(3, 4);");
  assert(1, ({ sub2(4, 3); }), "sub2(4, 3);");
  assert(55, ({ fib(9); }), "fib(9);");

  assert(3, ({ int x[2]; int *y = &x; *y = 3; *x; }), "int x[2]; int *y = &x; *y = 3; return *x;");
  assert(3, ({ int x[3]; *x = 3; *(x + 1) = 4; *(x + 2) = 5; *x; }), "int x[3]; *x = 3; *(x + 1) = 4; *(x + 2) = 5; *x;");
  assert(4, ({ int x[3]; *x = 3; *(x + 1) = 4; *(x + 2) = 5; *(x + 1); }), "int x[3]; *x = 3; *(x + 1) = 4; *(x + 2) = 5; *(x + 1);");
  assert(5, ({ int x[3]; *x = 3; *(x + 1) = 4; *(x + 2) = 5; *(x + 2); }), "int x[3]; *x = 3; *(x + 1) = 4; *(x + 2) = 5; *(x + 2);");
  assert(0, ({ int x[2][3]; int *y = x; *y = 0; **x; }), "int x[2][3]; int *y = x; *y = 0; **x;");
  assert(1, ({ int x[2][3]; int *y = x; *(y + 1) = 1; *(*x + 1); }), "int x[2][3]; int *y = x; *(y + 1) = 1; *(*x + 1);");
  assert(2, ({ int x[2][3]; int *y = x; *(y + 2) = 2; *(*x + 2); }), "int x[2][3]; int *y = x; *(y + 2) = 2; *(*x + 2);");
  assert(3, ({ int x[2][3]; int *y = x; *(y + 3) = 3; **(x + 1); }), "int x[2][3]; int *y = x; *(y + 3) = 3; **(x + 1);");
  assert(4, ({ int x[2][3]; int *y = x; *(y + 4) = 4; *(*(x + 1) + 1); }), "int x[2][3]; int *y = x; *(y + 4) = 4; *(*(x + 1) + 1);");
  assert(5, ({ int x[2][3]; int *y = x; *(y + 5) = 5; *(*(x + 1) + 2); }), "int x[2][3]; int *y = x; *(y + 5) = 5; *(*(x + 1) + 2);");
  assert(6, ({ int x[2][3]; int *y = x; *(y + 6) = 6; **(x + 2); }), "int x[2][3]; int *y = x; *(y + 6) = 6; **(x + 2);");
  assert(10, ({ int x[2][2][2]; int *y = x; *(y + 1) = 10; *(**x + 1); }), "int x[2][2][2]; int *y = x; *(y + 1) = 10; *(**x + 1);");
  assert(3, ({ int x[3]; *x=3; x[1]=4; x[2]=5; *x; }), "int x[3]; *x=3; x[1]=4; x[2]=5; *x;");
  assert(4, ({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+1); }), "int x[3]; *x=3; x[1]=4; x[2]=5; *(x+1);");
  assert(5, ({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+2); }), "int x[3]; *x=3; x[1]=4; x[2]=5; *(x+2);");
  assert(5, ({ int x[3]; *x=3; x[1]=4; x[2]=5; *(x+2); }), "int x[3]; *x=3; x[1]=4; x[2]=5; *(x+2);");
  assert(5, ({ int x[3]; *x=3; x[1]=4; x[2]=5; *(2+x); }), "int x[3]; *x=3; x[1]=4; x[2]=5; *(2+x);");
  assert(5, ({ int x[3]; *x=3; x[1]=4; 2[x]=5; *(x+2); }), "int x[3]; *x=3; x[1]=4; 2[x]=5; *(x+2);");
  assert(0, ({ int x[2][3]; int *y=x; y[0]=0; x[0][0]; }), "int x[2][3]; int *y=x; y[0]=0; x[0][0];");
  assert(1, ({ int x[2][3]; int *y=x; y[1]=1; x[0][1]; }), "int x[2][3]; int *y=x; y[1]=1; x[0][1];");
  assert(2, ({ int x[2][3]; int *y=x; y[2]=2; x[0][2]; }), "int x[2][3]; int *y=x; y[2]=2; x[0][2];");
  assert(3, ({ int x[2][3]; int *y=x; y[3]=3; x[1][0]; }), "int x[2][3]; int *y=x; y[3]=3; x[1][0];");
  assert(4, ({ int x[2][3]; int *y=x; y[4]=4; x[1][1]; }), "int x[2][3]; int *y=x; y[4]=4; x[1][1];");
  assert(5, ({ int x[2][3]; int *y=x; y[5]=5; x[1][2]; }), "int x[2][3]; int *y=x; y[5]=5; x[1][2];");
  assert(6, ({ int x[2][3]; int *y=x; y[6]=6; x[2][0]; }), "int x[2][3]; int *y=x; y[6]=6; x[2][0];");

  assert(8, ({ int x; sizeof(x); }), "int x; sizeof(x);");
  assert(8, ({ int x; sizeof x; }), "int x; sizeof x;");
  assert(8, ({ int *x; sizeof(x); }), "int *x; sizeof(x);");
  assert(32, ({ int x[4]; sizeof(x); }), "int x[4]; sizeof(x);");
  assert(96, ({ int x[3][4]; sizeof(x); }), "int x[3][4]; sizeof(x);");
  assert(32, ({ int x[3][4]; sizeof(*x); }), "int x[3][4]; sizeof(*x);");
  assert(8, ({ int x[3][4]; sizeof(**x); }), "int x[3][4]; sizeof(**x);");
  assert(9, ({ int x[3][4]; sizeof(**x) + 1; }), "int x[3][4]; sizeof(**x) + 1;");
  assert(9, ({ int x[3][4]; sizeof **x + 1; }), "int x[3][4]; sizeof **x + 1;");
  assert(8, ({ int x[3][4]; sizeof(**x + 1); }), "int x[3][4]; sizeof(**x + 1);");


  assert(0, g1, "g1");
  g1=3;
  assert(3, g1, "g1");

  g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3;
  assert(0, g2[0], "g2[0]");
  assert(1, g2[1], "g2[1]");
  assert(2, g2[2], "g2[2]");
  assert(3, g2[3], "g2[3]");

  assert(8, sizeof(g1), "sizeof(g1)");
  assert(32, sizeof(g2), "sizeof(g2)");

  assert(1, ({ char x = 1; x; }), "char x = 1; x;");
  assert(1, ({ char x = 1; char y = 2; x; }), "char x = 1; char y = 2; x;");
  assert(2, ({ char x = 1; char y = 2; y; }), "char x = 1; char y = 2; y;");

  assert(1, ({ char x; sizeof(x); }), "char x; sizeof(x);");
  assert(10, ({ char x[10]; sizeof(x); }), "char x[10]; sizeof(x);");
  assert(1, ({ sub_char(7, 3, 3); }), "sub_char(7, 3, 3);");

  assert(7, "\a"[0], "\"\\a\"[0];");
  assert(8, "\b"[0], "\"\\b\"[0];");
  assert(9, "\t"[0], "\"\\t\"[0];");
  assert(10, "\n"[0], "\"\\n\"[0];");
  assert(11, "\v"[0], "\"\\v\"[0];");
  assert(12, "\f"[0], "\"\\f\"[0];");
  assert(13, "\r"[0], "\"\\r\"[0];");
  assert(27, "\e"[0], "\"\\e\"[0];");
  assert(0, "\0"[0], "\"\\0\"[0];");

  assert(106, "\j"[0], "\"\\j\"[0];");
  assert(107, "\k"[0], "\"\\k\"[0];");
  assert(108, "\l"[0], "\"\\l\"[0];");

  assert(2, ({ int x = 2; { int x = 3; } x; }), "{ int x = 2; { int x = 3; } x; }");
  assert(2, ({ int x = 2; { int x = 3; } int y = 4; x; }), "{ int x = 2; { int x = 3; } int y = 4; x; }");
  assert(3, ({ int x = 2; { x = 3; } x; }), "{ int x = 2; { x = 3; } x; }");

  printf("OK\n");
  return 0;
}
